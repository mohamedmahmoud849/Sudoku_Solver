using System;
using System.Collections.Generic;
using System.Threading.Tasks;

namespace Sudoku_Solver
{
    public class Parallel
    {
        int length;
        char EMPTY_ENTRY = '*';
        public Parallel(int length)
        {
            this.length = length;
        }

        public void solveSudoku(char[,] board)
        {
            
            char[] prob = getCellProbabilities(0, 0, board);
            canSolveSudokuFromCell(0, 0, board);
        }



        public  void printBoard(char[,] b)
        {
            int length = (int)Math.Sqrt(b.Length);
            for (int i = 0; i < length; i++)
            {
                for (int j = 0; j < length; j++)
                    Console.Write(b[i, j] + " ");
                Console.WriteLine();
            }

        }




        public char[] getCellProbabilities(int row,int col,char[,] board)
        {
            char[] prob = new char[8];
            int i = 0;
            for(int value = 1; value <= 9; value++)
            {
                char charToPlace = (char)(value + '0');
                if (canPlaceValue(board, row, col, charToPlace))
                {
                    prob[i] = charToPlace;
                    i++;
                } 

            }
            return prob;
        }
       
        private bool canSolveSudokuFromCell(int row, int col, char[,] board)
        {
            if (col == length)
            {
                col = 0;
                row++;

                if (row == length)
                {
                    return true;
                }
            }

            // Skip entries already filled out. They already have a value in them.
            if (board[row, col] != EMPTY_ENTRY)
            {
                return canSolveSudokuFromCell(row, col + 1, board);
            }

            for (int value = 1; value <= length; value++)
            {
                char charToPlace = (char)(value + '0');

                if (canPlaceValue(board, row, col, charToPlace))
                {
                    board[row, col] = charToPlace;
                    if (canSolveSudokuFromCell(row, col + 1, board))
                    {
                        return true;
                    }
                    board[row, col] = EMPTY_ENTRY;
                }
            }

            return false;
        }

        private bool canPlaceValue(char[,] board, int row, int col, char charToPlace)
        {
            // Check column of the placement
            for (int i = 0; i < length; i++)
            {
                if (charToPlace == board[i, col])
                {
                    return false;
                }
            }


            // Check row of the placement
            for (int i = 0; i < length; i++)
            {
                if (charToPlace == board[row, i])
                {
                    return false;
                }
            }

            // Check region constraints - get the size of the sub-box
            int regionSize = (int)Math.Sqrt(length);

            int verticalBoxIndex = row / regionSize;
            int horizontalBoxIndex = col / regionSize;

            int topLeftOfSubBoxRow = regionSize * verticalBoxIndex; //3*0=0
            int topLeftOfSubBoxCol = regionSize * horizontalBoxIndex;//3*1=3

            for (int i = 0; i < regionSize; i++)
            {
                for (int j = 0; j < regionSize; j++)
                {
                    if (charToPlace == board[topLeftOfSubBoxRow + i, topLeftOfSubBoxCol + j])
                    {
                        return false;
                    }
                }
            }

            return true;
        }





    }
}


























/*    public int[] getBoxProbabilities(char[,] board, int row,int col)
        {
            
            int[] probabilities = new int[9];
            int counter = 0;
            int g = 0;

            for (int i = row; i < row+3; i++)
            {
                for (int j = col; j < col+3; j++)
                {
                    if (board[i, j] == EMPTY_ENTRY)
                    {
                        for (int k = 1; k <= 9; k++)
                        {
                            char charToPlace = (char)(k + '0');
                            if (canPlaceValue(board, i, j, charToPlace))
                            {

                                counter++;
                            }
                        }
                    }
                    probabilities[g] = counter;
                    counter = 0;
                    g++;
                }
            }
            return probabilities;
        } 

        public int[] getMinCellProbabilities(char[,] board, int[] boxprobability,int boxrow,int boxcol)
        {
            int i = 0;
            int index =0;
            int min = 10;
            while (i < 9) { 
                if(boxprobability[i] < min)
                {
                    min = boxprobability[i];
                    index = i;
                }
            }

            for(int value = 0; i < 10; value ++)
            {
                char charToPlace = (char)(value + '0');
                if (canPlaceValue(board, 0 + (index / 3), boxcol + (index - boxcol), charToPlace))
                {

                }
            }
            
        }
        */

